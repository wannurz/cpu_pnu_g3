{"entries":[{"timestamp":1744963455626,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"%[n-go^(uJ!g=F,m3y0|\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"!?h1Tk4O5~Iu20V6YTGe\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"cpe_g3_pnu.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":219,"start2":219,"length1":114,"length2":44}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"cpe_g3_pnu.ts","value":"/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Motor directions\n */\nenum cpeMotor {\n    //% block=\"Forward\"\n    Forward,\n    //% block=\"Backward\"\n    Backward\n}\n\n/**\n * Turn directions\n */\nenum cpeTurn {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Spin directions\n */\nenum cpeSpin {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Servo channels\n */\nenum cpeServo {\n    //% block=\"SV1\"\n    SV1,\n    //% block=\"SV2\"\n    SV2\n}\n\n/**\n * ADC channels\n */\nenum cpeReadADC {\n    //% block=\"ADC0\"\n    ADC0 = 0,\n    //% block=\"ADC1\"\n    ADC1 = 1,\n    //% block=\"ADC2\"\n    ADC2 = 2,\n    //% block=\"ADC3\"\n    ADC3 = 3,\n    //% block=\"ADC4\"\n    ADC4 = 4,\n    //% block=\"ADC5\"\n    ADC5 = 5,\n    //% block=\"ADC6\"\n    ADC6 = 6,\n    //% block=\"ADC7\"\n    ADC7 = 7\n}\n\n/**\n * Motor channel\n */\nenum cpeMotorCH {\n    //% block=\"M1\"\n    M1,\n    //% block=\"M2\"\n    M2\n}\n\n/**\n* Custom motor control blocks for CPE_PNU\n*/\n//% block=\"CPE PNU\" weight=100 color=#FFA500 icon=\"\\uf085\"\nnamespace cpe_pnu {\n\n    /**\n     * Control individual motor channel and direction.\n     * @param Channel Motor channel\n     * @param Direction Motor direction\n     * @param Speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_setMotor\" block=\"setMotor %cpeMotorCH|Direction %cpeMotor|Speed %Speed\"\n    //% Speed.min=0 Speed.max=100\n    //% weight=100\n    export function setMotor(Channel: cpeMotorCH, Direction: cpeMotor, Speed: number): void {\n        let motorspeed = pins.map(Speed, 0, 100, 0, 1023)\n\n        if (Channel == cpeMotorCH.M1 && Direction == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M2 && Direction == cpeMotor.Forward) {\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M1 && Direction == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n        }\n        else if (Channel == cpeMotorCH.M2 && Direction == cpeMotor.Backward) {\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n     * Turn the robot by running one motor.\n     * @param Turn Direction to turn, eg: cpeTurn.Left\n     * @param speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_turn\" block=\"Turn %cpeTurn|Speed %speed\"\n    //% speed.min=0 speed.max=100\n    export function Turn(Turn: cpeTurn, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Turn == cpeTurn.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, 0)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Turn == cpeTurn.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, 0)\n        }\n    }\n\n    /**\n     * Spin the robot in place (left or right).\n     * @param Spin Direction to spin, eg: cpeSpin.Left\n     * @param speed Speed (0 to 100), eg: 50\n     */\n    //% blockId=\"cpe_spin\" block=\"Spin %cpeSpin|Speed %speed\"\n    //% speed.min=0 speed.max=100\n    export function Spin(Spin: cpeSpin, speed: number): void {\n        let motorspeed = pins.map(speed, 0, 100, 0, 1023)\n\n        if (Spin == cpeSpin.Left) {\n            pins.digitalWritePin(DigitalPin.P13, 0)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 0)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n        else if (Spin == cpeSpin.Right) {\n            pins.digitalWritePin(DigitalPin.P13, 1)\n            pins.analogWritePin(AnalogPin.P14, motorspeed)\n            pins.digitalWritePin(DigitalPin.P15, 1)\n            pins.analogWritePin(AnalogPin.P16, motorspeed)\n        }\n    }\n\n    /**\n     * Stop both motors.\n     */\n    //% blockId=\"cpe_motorStop\" block=\"Motor Stop\"\n    export function MotorStop(): void {\n        pins.digitalWritePin(DigitalPin.P13, 1)\n        pins.analogWritePin(AnalogPin.P14, 0)\n        pins.digitalWritePin(DigitalPin.P15, 1)\n        pins.analogWritePin(AnalogPin.P16, 0)\n    }\n\n    /**\n     * Control Servo 1 or 2 set degree between 0 - 180\n     * @param Degree servo degree 0-180, eg: 90\n     */\n    //% blockId=\"cpe_Servo\" block=\"Servo %cpeServo|Degree %Degree\"\n    //% Degree.min=0 Degree.max=180\n    //% weight=75\n    export function Servo(Servo: cpeServo, Degree: number): void {\n        if (Servo == cpeServo.SV1) {\n            pins.servoWritePin(AnalogPin.P8, Degree)\n        }\n        else if (Servo == cpeServo.SV2) {\n            pins.servoWritePin(AnalogPin.P12, Degree)\n        }\n    }\n\n    /**\n     * Set Servo to free rotation\n     * @param Servo Servo to stop\n     */\n    //% blockId=\"cpe_ServoStop\" block=\"Servo Stop %cpeServo\"\n    //% weight=70\n    export function ServoStop(Servo: cpeServo): void {\n        if (Servo == cpeServo.SV1) {\n            pins.servoSetPulse(AnalogPin.P8, 0)\n        }\n        else if (Servo == cpeServo.SV2) {\n            pins.servoSetPulse(AnalogPin.P12, 0)\n        }\n    }\n\n    /**\n     * Read ADC channel 0-7\n     * @param ReadADC ADC channel to read\n     */\n    //% blockId=\"cpe_readADC\" block=\"Read %cpeReadADC\"\n    //% weight=60\n    export function ReadADC(ReadADC: cpeReadADC): number {\n        pins.i2cWriteNumber(72, ReadADC, NumberFormat.UInt8LE, false)\n        return pins.i2cReadNumber(72, NumberFormat.UInt16BE, false)\n    }\n}\n"}]}],"snapshots":[{"timestamp":1744963455625,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Cpu_pnu2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1744963553213}